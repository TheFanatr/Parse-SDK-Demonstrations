using System.IO;
using System.Reflection;
using Parse.Abstractions.Infrastructure;

namespace Parse.Infrastructure
{
    /// <summary>
    /// A configuration of the Parse SDK persistent storage location based on product metadata such as company name and product name.
    /// </summary>
    public struct MetadataBasedRelativeCacheLocationGenerator : IRelativeCacheLocationGenerator
    {
        /// <summary>
        /// An instance of <see cref="MetadataBasedRelativeCacheLocationGenerator"/> with inferred values based on the entry assembly. Should be used with <see cref="EnvironmentData.Inferred"/> and <see cref="HostManifestData.Inferred"/>.
        /// </summary>
        /// <remarks>Should not be used with Unity.</remarks>
        public static MetadataBasedRelativeCacheLocationGenerator Inferred => new MetadataBasedRelativeCacheLocationGenerator
        {
            Company = Assembly.GetExecutingAssembly()?.GetCustomAttribute<AssemblyCompanyAttribute>()?.Company,
            Product = Assembly.GetEntryAssembly()?.GetCustomAttribute<AssemblyProductAttribute>()?.Product ?? Assembly.GetEntryAssembly()?.GetName()?.Name
        };

        /// <summary>
        /// The name of the company that owns the product specified by <see cref="Product"/>.
        /// </summary>
        public string Company { get; set; }

        /// <summary>
        /// The name of the product that is using the Parse .NET SDK.
        /// </summary>
        public string Product { get; set; }

        /// <summary>
        /// The corresponding relative path generated by this <see cref="IRelativeCacheLocationGenerator"/>.
        /// </summary>
        public string GetRelativeCacheFilePath(IServiceHub serviceHub) => Path.Combine(Company ?? nameof(Parse), Product ?? "_global", $"{serviceHub.MetadataController.HostManifestData.ShortVersion ?? "1.0.0.0"}.pc");
    }
}
